/*
 * Copyright 2025 The Go-Spring Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package golang

import (
	"bytes"
	"go/format"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"

	"github.com/go-spring/gs-http-gen/gen/generator"
	"github.com/go-spring/gs-http-gen/lib/tidl"
	"github.com/lvan100/errutil"
)

// toolVersionTmpl for generating the tool version constant.
var toolVersionTmpl = template.Must(template.New("toolVersion").Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

const ToolVersion = "{{.ToolVersion}}"
`))

// Context holds all necessary information used during code generation.
type Context struct {
	config *generator.Config        // Generator configuration options
	meta   *tidl.MetaInfo           // Service metadata (name, version, etc.)
	files  map[string]tidl.Document // Parsed TIDL documents keyed by file name
	funcs  map[string]ValidateFunc  // Collected validation functions
	reqs   map[string]string        // request type name
}

type Generator struct{}

// Gen is the main entry point for generating code.
func (g *Generator) Gen(config *generator.Config, files map[string]tidl.Document, meta *tidl.MetaInfo) error {
	ctx := Context{
		config: config,
		meta:   meta,
		files:  files,
		funcs:  make(map[string]ValidateFunc),
		reqs:   make(map[string]string),
	}

	// Collect all RPC definitions
	var rpcs []RPC
	for _, doc := range files {
		for _, r := range doc.RPCs {
			rpc, err := convertRPC(r)
			if err != nil {
				return err
			}
			rpcs = append(rpcs, rpc)
		}
	}
	sort.Slice(rpcs, func(i, j int) bool {
		return rpcs[i].Name < rpcs[j].Name
	})

	// Generate type code
	for fileName, doc := range files {
		if err := g.genType(ctx, fileName, doc); err != nil {
			return errutil.Explain(nil, "generate type file %s error: %w", fileName, err)
		}
	}

	// Generate server code if enabled in the configuration
	if config.EnableServer {
		if err := g.genValidate(ctx); err != nil {
			return errutil.Explain(nil, "generate validate file error: %w", err)
		}
		if err := g.genServer(ctx, rpcs); err != nil {
			return errutil.Explain(nil, "generate server file error: %w", err)
		}
	}

	// Generate client code if enabled in the configuration
	if config.EnableClient {
		if err := g.genClient(ctx, rpcs); err != nil {
			return errutil.Explain(nil, "generate client file error: %w", err)
		}
	}

	// Generate a Go file containing the tool version constant
	{
		buf := &bytes.Buffer{}
		err := toolVersionTmpl.Execute(buf, map[string]any{
			"Package":     ctx.config.GoPackage,
			"ToolVersion": ctx.config.ToolVersion,
		})
		if err != nil {
			return errutil.Explain(nil, "generate tool version file error: %w", err)
		}
		fileName := filepath.Join(ctx.config.OutputDir, "tool_version.go")
		if err = formatFile(fileName, buf.Bytes()); err != nil {
			return errutil.Explain(nil, "write tool version file error: %w", err)
		}
	}

	return nil
}

// formatFile formats Go source code using `go format`
// and writes the formatted code to the given file.
func formatFile(fileName string, b []byte) error {
	b, err := format.Source(b)
	if err != nil {
		return errutil.Explain(nil, "format source for file %s error: %w", fileName, err)
	}
	err = os.WriteFile(fileName, b, os.ModePerm)
	if err != nil {
		return errutil.Explain(nil, "write file %s error: %w", fileName, err)
	}
	return nil
}

// formatComment converts a tidl.Comments into Go comments.
func formatComment(c tidl.Comments) string {
	var comment string
	for _, s := range c.Above {
		comment += s.Text[0]
	}
	if c.Right != nil {
		if c.Above != nil {
			comment += "\n"
		}
		comment += strings.Join(c.Right.Text, "\n")
	}
	return comment
}
