/*
 * Copyright 2025 The Go-Spring Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package golang

import (
	"bytes"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/lvan100/errutil"
)

// typeTmpl is a Go template used to generate Go source code from IDL definitions.
var typeTmpl = template.Must(template.New("type").
	Funcs(map[string]any{
		"TrimPrefix": strings.TrimPrefix,
		"OptionalBaseType": func(k TypeKind) bool {
			return k == TypeKindOptionalBaseType
		},
		"OptionalEnumType": func(k TypeKind) bool {
			return k == TypeKindOptionalEnumType
		},
	}).
	Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/lvan100/errutil"
)

var _ = strings.Contains
var _ = http.NewServeMux

{{ range $c := .Consts }}
{{- if $c.Comment }}
	{{$c.Comment}}
{{- end}}
const {{$c.Name}} {{$c.Type}} = {{$c.Value}}
{{end}}

{{ range $e := .Enums }}
	{{- if $e.Comment}}
		{{$e.Comment}}
	{{- end}}
	type {{$e.Name}} int32

	const (
		{{range $f := $e.Fields}}
			{{- if $f.Comment}}
				{{$f.Comment}}
			{{- end}}
			{{$e.Name}}_{{$f.Name}} {{$e.Name}} = {{$f.Value}}
		{{- end}}
	)

	var (
		{{$e.Name}}_name = map[{{$e.Name}}]string{
			{{- range $f := $e.Fields}}
				{{$f.Value}} : "{{$f.Name}}",
			{{- end}}
		}
		{{$e.Name}}_value = map[string]{{$e.Name}}{
			{{- range $f := $e.Fields}}
				"{{$f.Name}}" : {{$f.Value}},
			{{- end}}
		}
	)

	// OneOf{{$e.Name}} is usually used for validation.
	func OneOf{{$e.Name}}(i {{$e.Name}}) bool {
		_, ok := {{$e.Name}}_name[i]
		return ok
	}

	// {{$e.Name}}AsString wraps {{$e.Name}} to encode/decode as a JSON string.
	type {{$e.Name}}AsString {{$e.Name}}

	// MarshalJSON implements custom JSON encoding for the enum as a string.
	func (x {{$e.Name}}AsString) MarshalJSON() ([]byte, error) {
		if s, ok := {{$e.Name}}_name[{{$e.Name}}(x)]; ok {
			return []byte(fmt.Sprintf("\"%s\"", s)), nil
		}
		return nil, errutil.Explain(nil,"invalid {{$e.Name}}: %d", x)
	}

	// UnmarshalJSON implements custom JSON decoding for the enum from a string.
	func (x *{{$e.Name}}AsString) UnmarshalJSON(data []byte) error {
		str := strings.Trim(string(data), "\"")
		if v, ok := {{$e.Name}}_value[str]; ok {
			*x = {{$e.Name}}AsString(v)
			return nil
		}
		return errutil.Explain(nil,"invalid {{$e.Name}} value: %q", str)
	}
{{end}}

{{range $s := .Structs}}
	{{- if $s.Comment}}
		{{$s.Comment}}
	{{- end}}
	type {{$s.Name}} struct {
		{{- if $s.Split}}
			{{$s.Name}}Body
		{{- end}}
		{{- range $f := $s.Fields}}
			{{- if $f.Comment}}
				{{$f.Comment}}
			{{- end}}
			{{$f.Name}} {{$f.Type}} {{$f.Tag}}
		{{- end}}
	}

	// New returns a new instance (implements Object interface).
	func (x *{{$s.Name}}) New() any {
		return &{{$s.Name}}{}
	}

	// Binding extracts non-body values (path, query) from *http.Request.
	func (x *{{$s.Name}}) Binding(r *http.Request) error {
		return Binding(r, []BindingField {
			{{- range $f := $s.Fields}}
				{{- if $f.Binding}}
			{"{{$s.Name}}.{{$f.Name}}", "{{$f.Binding.From}}", "{{$f.Binding.Name}}", &x.{{$f.Name}}},
				{{- end}}
			{{- end}}
		})
	}

	// Validate checks field values using generated validation expressions.
	func (x *{{$s.Name}}) Validate() error {
		{{- range $f := $s.Fields}}
			{{- if $f.Validate}}
		{{$f.Validate}}
			{{- end}}
		{{- end}}
		return nil
	}

	func (x *{{$s.Name}}) String() string {
		if x == nil {
			return "<nil>"
		}
		return fmt.Sprintf("{{$s.Name}}(%+v)", *x)
	}

{{end}}
`))

// genType generates a Go source file corresponding to the IDL file.
// It includes constants, enums, and struct types.
func (g *Generator) genType(ctx Context, fileName string, code Go) error {

	buf := &bytes.Buffer{}
	err := typeTmpl.Execute(buf, map[string]any{
		"Package": ctx.config.GoPackage,
		"Consts":  code.Consts[fileName],
		"Enums":   code.Enums[fileName],
		"Structs": code.Types[fileName],
	})
	if err != nil {
		return errutil.Explain(nil, "execute template error: %w", err)
	}

	fileName = fileName[:strings.LastIndex(fileName, ".")] + ".go"
	fileName = filepath.Join(ctx.config.OutputDir, fileName)
	return g.FormatFile(fileName, buf.Bytes())
}
