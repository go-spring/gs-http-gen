/*
 * Copyright 2025 The Go-Spring Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package golang

import (
	"bytes"
	"embed"
	"os"
	"path/filepath"
	"text/template"

	"github.com/lvan100/errutil"
)

//go:embed proto
var protoDir embed.FS

// serverTmpl for generating the HTTP server wrapper based on RPC definitions.
var serverTmpl = template.Must(template.New("server").Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"net/http"
)

// {{.Service}}Server defines the interface that service must implement.
type {{.Service}}Server interface {
    {{- range $r := .RPCs}}
		{{- if $r.Comment}}
			{{$r.Comment}}
		{{- end}}
		{{- if $r.Stream}}
            {{$r.Name}}(context.Context, *{{$r.Request}}, chan<- *{{$r.Response}})
		{{- else}}
            {{$r.Name}}(context.Context, *{{$r.Request}}) *{{$r.Response}}
        {{- end}}
    {{- end}}
}

// InitRouter registers the service handlers into the given *http.ServeMux.
func InitRouter(mux *http.ServeMux, server {{.Service}}Server) {
    {{- range $r := .RPCs}}
		{{- if $r.Stream}}
			mux.HandleFunc("{{$r.Method}} {{$r.Path}}", HandleStream(server.{{$r.Name}}))
		{{- else}}
			mux.HandleFunc("{{$r.Method}} {{$r.Path}}", HandleJSON(server.{{$r.Name}}))
		{{- end}}
    {{- end}}
}
`))

// genServer generates the HTTP handler and router initialization code
// for the given service context and RPC definitions.
func (g *Generator) genServer(ctx Context, rpcs []RPC) error {

	// Copy proto template files to output directory
	{
		entries, err := protoDir.ReadDir("proto")
		if err != nil {
			return errutil.Explain(nil, "read proto directory error: %w", err)
		}
		for _, e := range entries {
			if e.IsDir() {
				continue
			}
			b, err := protoDir.ReadFile(filepath.Join("proto", e.Name()))
			if err != nil {
				return errutil.Explain(nil, "read proto file %s error: %w", e.Name(), err)
			}
			b = bytes.ReplaceAll(b, []byte("PACKAGE_NAME"), []byte(ctx.config.GoPackage))
			fileName := filepath.Join(ctx.config.OutputDir, e.Name())
			if err = os.WriteFile(fileName, b, os.ModePerm); err != nil {
				return errutil.Explain(nil, "write proto file %s error: %w", fileName, err)
			}
		}
	}

	buf := &bytes.Buffer{}
	err := serverTmpl.Execute(buf, map[string]any{
		"Package": ctx.config.GoPackage,
		"Service": ctx.meta.Name,
		"RPCs":    rpcs,
	})
	if err != nil {
		return errutil.Explain(nil, "execute template error: %w", err)
	}
	fileName := ctx.meta.Name + "_http.go"
	fileName = filepath.Join(ctx.config.OutputDir, fileName)
	return formatFile(fileName, buf.Bytes())
}
