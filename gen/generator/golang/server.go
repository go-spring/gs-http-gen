package golang

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/go-spring/gs-http-gen/gen/generator"
	"github.com/go-spring/gs-http-gen/lib/parser"
)

var serverTmpl = template.Must(template.New("server").Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"encoding/json"
	"io"
	"net/http"
)

type {{.Service}}Server interface {
    {{- range $r := .RPCs}}
        {{$r.Name}}(context.Context, *{{$r.Request}}) *{{$r.Response}}
    {{- end}}
}

func InitRouter(mux *http.ServeMux, server {{.Service}}Server) {
    {{- range $r := .RPCs}}
		mux.HandleFunc("{{$r.Method}} {{$r.Path}}", JSON(server.{{$r.Name}}))
    {{- end}}
}

func ReadRequest(r *http.Request, i interface{}) error {
	b, err := io.ReadAll(r.Body)
	if err != nil {
		return err
	}
	if len(b) == 0 {
		return nil
	}
	return json.Unmarshal(b, i)
}

func WriteResponse(w http.ResponseWriter, i interface{}) {
	b, err := json.Marshal(i)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if _, err = w.Write(b); err != nil {
		return
	}
}

func JSON[Req interface{ New() any }, Resp any](h func(context.Context, Req) Resp) http.HandlerFunc {
	var x Req
	return func(w http.ResponseWriter, r *http.Request) {
		req := x.New().(Req)
		if err := ReadRequest(r, req); err != nil {
			WriteResponse(w, err)
			return
		}
		res := h(r.Context(), req)
		WriteResponse(w, res)
	}
}
`))

func (g *Generator) genServer(ctx Context, rpcs []*parser.RPC) error {
	newRPCs, err := toRPCs(ctx, rpcs)
	if err != nil {
		return err
	}
	buf := &bytes.Buffer{}
	err = serverTmpl.Execute(buf, map[string]interface{}{
		"Package": ctx.config.PkgName,
		"Service": generator.ToPascal(ctx.meta.Name),
		"RPCs":    newRPCs,
	})
	if err != nil {
		return err
	}
	b, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	fileName := ctx.meta.Name + "_http.go"
	fileName = filepath.Join(ctx.config.OutDir, fileName)
	return os.WriteFile(fileName, b, os.ModePerm)
}

type RPC struct {
	Name     string
	Request  string
	Response string
	Stream   bool
	Path     string
	Method   string
}

func toRPCs(ctx Context, rpcs []*parser.RPC) ([]RPC, error) {
	var ret []RPC
	for _, r := range rpcs {
		respType := generator.ToPascal(r.Response.TypeName)
		if r.Response.UserType != nil {
			respType += generator.ToPascal(r.Response.UserType.Name)
		}
		path, ok := generator.GetAnnotation(r.Annotations, "path")
		if !ok {
			return nil, fmt.Errorf("annotation path not found")
		}
		method, ok := generator.GetAnnotation(r.Annotations, "method")
		if !ok {
			return nil, fmt.Errorf("annotation method not found")
		}
		ret = append(ret, RPC{
			Name:     generator.ToPascal(r.Name),
			Request:  generator.ToPascal(r.Request),
			Response: respType,
			Stream:   r.Response.Stream,
			Path:     strings.Trim(*path.Value, "\""),
			Method:   strings.ToUpper(strings.Trim(*method.Value, "\"")),
		})
	}
	return ret, nil
}
