/*
 * Copyright 2025 The Go-Spring Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package golang

import (
	"bytes"
	"embed"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/go-spring/gs-http-gen/gen/generator"
	"github.com/go-spring/gs-http-gen/lib/tidl"
)

//go:embed proto
var protoDir embed.FS

// toolVersionTmpl for generating the tool version constant.
var toolVersionTmpl = template.Must(template.New("toolVersion").Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

const ToolVersion = "{{.ToolVersion}}"
`))

// serverTmpl for generating the HTTP server wrapper based on the RPC definitions.
var serverTmpl = template.Must(template.New("server").Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"net/http"
)

// {{.Service}}Server defines the interface that service must implement.
type {{.Service}}Server interface {
    {{- range $r := .RPCs}}
		{{- if $r.Comment}}
			{{$r.Comment}}
		{{- end}}
		{{- if $r.Stream}}
            {{$r.Name}}(context.Context, *{{$r.Request}}, chan<- *{{$r.Response}})
		{{- else}}
            {{$r.Name}}(context.Context, *{{$r.Request}}) *{{$r.Response}}
        {{- end}}
    {{- end}}
}

// InitRouter registers the service handlers into the given *http.ServeMux.
func InitRouter(mux *http.ServeMux, server {{.Service}}Server) {
    {{- range $r := .RPCs}}
		{{- if $r.Stream}}
			mux.HandleFunc("{{$r.Method}} {{$r.Path}}", HandleStream(server.{{$r.Name}}))
		{{- else}}
			mux.HandleFunc("{{$r.Method}} {{$r.Path}}", HandleJSON(server.{{$r.Name}}))
		{{- end}}
    {{- end}}
}
`))

// genServer generates the HTTP handler and router initialization code
// for the given service context and list of RPCs.
func (g *Generator) genServer(ctx Context, rpcs []tidl.RPC) error {

	// Copy proto template files to output directory
	{
		entries, err := protoDir.ReadDir("proto")
		if err != nil {
			return err
		}
		for _, e := range entries {
			if e.IsDir() {
				continue
			}
			var b []byte
			if b, err = protoDir.ReadFile(filepath.Join("proto", e.Name())); err != nil {
				return err
			}
			b = bytes.ReplaceAll(b, []byte("PACKAGE_NAME"), []byte(ctx.config.PackageName))
			fileName := filepath.Join(ctx.config.OutputDir, e.Name())
			err = os.WriteFile(fileName, b, os.ModePerm)
			if err != nil {
				return err
			}
		}
	}

	// Generate a Go file containing the tool version constant
	{
		buf := &bytes.Buffer{}
		err := toolVersionTmpl.Execute(buf, map[string]any{
			"Package":     ctx.config.PackageName,
			"ToolVersion": ctx.config.ToolVersion,
		})
		if err != nil {
			return err
		}
		fileName := filepath.Join(ctx.config.OutputDir, "tool_version.go")
		err = formatFile(fileName, buf.Bytes())
		if err != nil {
			return err
		}
	}

	newRPCs, err := convertRPCs(rpcs)
	if err != nil {
		return err
	}
	buf := &bytes.Buffer{}
	err = serverTmpl.Execute(buf, map[string]any{
		"Package": ctx.config.PackageName,
		"Service": ctx.meta.Name,
		"RPCs":    newRPCs,
	})
	if err != nil {
		return err
	}
	fileName := ctx.meta.Name + "_http.go"
	fileName = filepath.Join(ctx.config.OutputDir, fileName)
	return formatFile(fileName, buf.Bytes())
}

// RPC represents a single remote procedure call with HTTP metadata.
type RPC struct {
	Name     string // Method name
	Request  string // Request type name
	Response string // Response type name
	Stream   bool   // Whether this RPC is a streaming RPC
	Path     string // HTTP path
	Method   string // HTTP method (GET, POST, etc.)
	Comment  string // comment or description of the RPC
}

// convertRPCs converts tidl.RPC definitions into internal RPC structs.
func convertRPCs(rpcs []tidl.RPC) ([]RPC, error) {
	var ret []RPC
	for _, r := range rpcs {
		respType := generator.CapitalizeASCII(r.Response.TypeName)
		if r.Response.UserType != nil {
			respType += generator.CapitalizeASCII(r.Response.UserType.Name)
		}

		path, ok := tidl.GetOneOfAnnotation(r.Annotations, "path")
		if !ok {
			return nil, fmt.Errorf("annotation path not found")
		}
		if path.Value == nil {
			return nil, fmt.Errorf("annotation path value is nil")
		}

		method, ok := tidl.GetOneOfAnnotation(r.Annotations, "method")
		if !ok {
			return nil, fmt.Errorf("annotation method not found")
		}
		if method.Value == nil {
			return nil, fmt.Errorf("annotation method value is nil")
		}

		ret = append(ret, RPC{
			Name:     generator.CapitalizeASCII(r.Name),
			Request:  generator.CapitalizeASCII(r.Request),
			Response: respType,
			Stream:   r.Response.Stream,
			Path:     strings.Trim(*path.Value, "\""),
			Method:   strings.ToUpper(strings.Trim(*method.Value, "\"")),
			Comment:  genComment(r.Comments),
		})
	}
	return ret, nil
}
