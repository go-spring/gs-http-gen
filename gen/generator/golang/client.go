/*
 * Copyright 2025 The Go-Spring Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package golang

import (
	"bytes"
	"path/filepath"
	"text/template"

	"github.com/lvan100/errutil"
)

var clientTmpl = template.Must(template.New("client").Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

import (
	"context"
)

// ClientInterface defines an interface for implementing middleware mechanisms.
type ClientInterface interface {
    {{- range $r := .RPCs}}
		{{- if not $r.Stream}}
			{{- if $r.Comment}}
				{{$r.Comment}}
			{{- end}}
            {{$r.Name}}(context.Context, *{{$r.Request}}) *{{$r.Response}}
        {{- end}}
    {{- end}}
}

// Client is a wrapper struct that embeds ClientInterface.
// It can be used to track or extend the construction process of the client.
type Client struct {
	ClientInterface
}
`))

var clientImplTmpl = template.Must(template.New("clientImpl").Parse(`
// Code generated by gs-http-gen compiler. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"net/http"

	"github.com/lvan100/golib/httputil"
)

type ClientImpl struct {}

func (c *ClientImpl) getClient() httputil.Client {
	return nil
}

{{- range $r := .RPCs}}
	{{- if not $r.Stream}}
{{- if $r.Comment}}
	{{$r.Comment}}
{{- end}}
func (c *ClientImpl) {{$r.Name}}(ctx context.Context, req *{{$r.Request}}) (*http.Response, *{{$r.Response}}, error) {
	url := "{{$r.Path}}"
	r, err := httputil.NewRequest(ctx, "{{$r.Method}}", url, httputil.FORM, req.{{$r.Request}}Body)
	if err != nil {
		return nil, nil, err
	}
	return httputil.JSONResponse[{{$r.Response}}](c.getClient(), r)
}
    {{- end}}
{{- end}}
`))

// genClient generates the HTTP client code for a given service.
func (g *Generator) genClient(ctx Context, rpcs []RPC) error {
	if err := g.genClientInterface(ctx, rpcs); err != nil {
		return err
	}
	if err := g.genClientImplement(ctx, rpcs); err != nil {
		return err
	}
	return nil
}

func (g *Generator) genClientInterface(ctx Context, rpcs []RPC) error {
	buf := &bytes.Buffer{}
	err := clientTmpl.Execute(buf, map[string]any{
		"Package": ctx.config.GoPackage,
		"RPCs":    rpcs,
	})
	if err != nil {
		return errutil.Explain(nil, "execute template error: %w", err)
	}
	fileName := filepath.Join(ctx.config.OutputDir, "client.go")
	return g.FormatFile(fileName, buf.Bytes())
}

func (g *Generator) genClientImplement(ctx Context, rpcs []RPC) error {
	buf := &bytes.Buffer{}
	err := clientImplTmpl.Execute(buf, map[string]any{
		"Package": ctx.config.GoPackage,
		"RPCs":    rpcs,
	})
	if err != nil {
		return errutil.Explain(nil, "execute template error: %w", err)
	}
	fileName := filepath.Join(ctx.config.OutputDir, "client_impl.go")
	return g.FormatFile(fileName, buf.Bytes())
}
