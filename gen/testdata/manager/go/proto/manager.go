// Code generated by gs-http-gen compiler. DO NOT EDIT.

package proto

import (
	"fmt"
)

type ErrCode int32

const (
	ErrCode_ErrOk       ErrCode = 0
	ErrCode_PARAM_ERROR ErrCode = 1003
)

var (
	ErrCode_name = map[int32]string{
		0:    "ErrOk",
		1003: "PARAM_ERROR",
	}
	ErrCode_value = map[string]int32{
		"ErrOk":       0,
		"PARAM_ERROR": 1003,
	}
)

func OneOfErrCode(i int32) bool {
	_, ok := ErrCode_name[i]
	return ok
}

type ManagerReq struct {
	Id string `json:"id"`
}

func NewManagerReq() *ManagerReq {
	return &ManagerReq{}
}

func (x *ManagerReq) New() any {
	return NewManagerReq()
}

func (x *ManagerReq) GetId() (r string) {
	if x != nil {
		return x.Id
	}
	return r
}

func (x *ManagerReq) SetId(v string) {
	if x != nil {
		x.Id = v
	}
}

func (p *ManagerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerReq(%+v)", *p)
}

type Manager struct {
	Name string `json:"name"`
	Age  *int64 `json:"age"`
}

func NewManager() *Manager {
	return &Manager{}
}

func (x *Manager) New() any {
	return NewManager()
}

func (x *Manager) GetName() (r string) {
	if x != nil {
		return x.Name
	}
	return r
}

func (x *Manager) SetName(v string) {
	if x != nil {
		x.Name = v
	}
}

func (x *Manager) GetAge() (r *int64) {
	if x != nil {
		return x.Age
	}
	return r
}

func (x *Manager) SetAge(v *int64) {
	if x != nil {
		x.Age = v
	}
}

func (p *Manager) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Manager(%+v)", *p)
}

type ResponseManager struct {
	Errno  ErrCode  `json:"errno"`
	Errmsg string   `json:"errmsg"`
	Data   *Manager `json:"data"`
}

func NewResponseManager() *ResponseManager {
	return &ResponseManager{}
}

func (x *ResponseManager) New() any {
	return NewResponseManager()
}

func (x *ResponseManager) GetErrno() (r ErrCode) {
	if x != nil {
		return x.Errno
	}
	return r
}

func (x *ResponseManager) SetErrno(v ErrCode) {
	if x != nil {
		x.Errno = v
	}
}

func (x *ResponseManager) GetErrmsg() (r string) {
	if x != nil {
		return x.Errmsg
	}
	return r
}

func (x *ResponseManager) SetErrmsg(v string) {
	if x != nil {
		x.Errmsg = v
	}
}

func (x *ResponseManager) GetData() (r *Manager) {
	if x != nil {
		return x.Data
	}
	return r
}

func (x *ResponseManager) SetData(v *Manager) {
	if x != nil {
		x.Data = v
	}
}

func (p *ResponseManager) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseManager(%+v)", *p)
}
