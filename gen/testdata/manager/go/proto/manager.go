// Code generated by gs-http-gen compiler. DO NOT EDIT.

package proto

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/lvan100/errutil"
)

var _ = strings.Contains
var _ = http.NewServeMux

// years
const MAX_AGE int64 = 150

const MIN_AGE int64 = 18

const DEFAULT_VIP bool = false

const DEFAULT_ROLE string = "user"

const DEFAULT_PAGE int64 = 1

const DEFAULT_PAGE_SIZE int64 = 20

const MAX_PAGE_SIZE int64 = 100

const SALARY_MIN float64 = 0.0

const SALARY_MAX float64 = 1000000.0

// Standard error codes
type ErrCode int32

const (
	ErrCode_ERR_OK            ErrCode = 0
	ErrCode_PARAM_ERROR       ErrCode = 1003
	ErrCode_NOT_FOUND         ErrCode = 4004
	ErrCode_PERMISSION_DENIED ErrCode = 4003
	ErrCode_INTERNAL_ERROR    ErrCode = 5000
)

var (
	ErrCode_name = map[ErrCode]string{
		0:    "ERR_OK",
		1003: "PARAM_ERROR",
		4004: "NOT_FOUND",
		4003: "PERMISSION_DENIED",
		5000: "INTERNAL_ERROR",
	}
	ErrCode_value = map[string]ErrCode{
		"ERR_OK":            0,
		"PARAM_ERROR":       1003,
		"NOT_FOUND":         4004,
		"PERMISSION_DENIED": 4003,
		"INTERNAL_ERROR":    5000,
	}
)

// OneOfErrCode is usually used for validation.
func OneOfErrCode(i ErrCode) bool {
	_, ok := ErrCode_name[i]
	return ok
}

// ErrCodeAsString wraps ErrCode to encode/decode as a JSON string.
type ErrCodeAsString ErrCode

// MarshalJSON implements custom JSON encoding for the enum as a string.
func (x ErrCodeAsString) MarshalJSON() ([]byte, error) {
	if s, ok := ErrCode_name[ErrCode(x)]; ok {
		return []byte(fmt.Sprintf("\"%s\"", s)), nil
	}
	return nil, errutil.Explain(nil, "invalid ErrCode: %d", x)
}

// UnmarshalJSON implements custom JSON decoding for the enum from a string.
func (x *ErrCodeAsString) UnmarshalJSON(data []byte) error {
	str := strings.Trim(string(data), "\"")
	if v, ok := ErrCode_value[str]; ok {
		*x = ErrCodeAsString(v)
		return nil
	}
	return errutil.Explain(nil, "invalid ErrCode value: %q", str)
}

// Manager seniority levels
type ManagerLevel int32

const (
	ManagerLevel_JUNIOR ManagerLevel = 1
	ManagerLevel_MIDDLE ManagerLevel = 2
	ManagerLevel_SENIOR ManagerLevel = 3
)

var (
	ManagerLevel_name = map[ManagerLevel]string{
		1: "JUNIOR",
		2: "MIDDLE",
		3: "SENIOR",
	}
	ManagerLevel_value = map[string]ManagerLevel{
		"JUNIOR": 1,
		"MIDDLE": 2,
		"SENIOR": 3,
	}
)

// OneOfManagerLevel is usually used for validation.
func OneOfManagerLevel(i ManagerLevel) bool {
	_, ok := ManagerLevel_name[i]
	return ok
}

// ManagerLevelAsString wraps ManagerLevel to encode/decode as a JSON string.
type ManagerLevelAsString ManagerLevel

// MarshalJSON implements custom JSON encoding for the enum as a string.
func (x ManagerLevelAsString) MarshalJSON() ([]byte, error) {
	if s, ok := ManagerLevel_name[ManagerLevel(x)]; ok {
		return []byte(fmt.Sprintf("\"%s\"", s)), nil
	}
	return nil, errutil.Explain(nil, "invalid ManagerLevel: %d", x)
}

// UnmarshalJSON implements custom JSON decoding for the enum from a string.
func (x *ManagerLevelAsString) UnmarshalJSON(data []byte) error {
	str := strings.Trim(string(data), "\"")
	if v, ok := ManagerLevel_value[str]; ok {
		*x = ManagerLevelAsString(v)
		return nil
	}
	return errutil.Explain(nil, "invalid ManagerLevel value: %q", str)
}

// Company departments
type Department int32

const (
	Department_ENGINEERING Department = 1
	Department_MARKETING   Department = 2
	Department_SALES       Department = 3
	Department_HR          Department = 4
	Department_FINANCE     Department = 5
)

var (
	Department_name = map[Department]string{
		1: "ENGINEERING",
		2: "MARKETING",
		3: "SALES",
		4: "HR",
		5: "FINANCE",
	}
	Department_value = map[string]Department{
		"ENGINEERING": 1,
		"MARKETING":   2,
		"SALES":       3,
		"HR":          4,
		"FINANCE":     5,
	}
)

// OneOfDepartment is usually used for validation.
func OneOfDepartment(i Department) bool {
	_, ok := Department_name[i]
	return ok
}

// DepartmentAsString wraps Department to encode/decode as a JSON string.
type DepartmentAsString Department

// MarshalJSON implements custom JSON encoding for the enum as a string.
func (x DepartmentAsString) MarshalJSON() ([]byte, error) {
	if s, ok := Department_name[Department(x)]; ok {
		return []byte(fmt.Sprintf("\"%s\"", s)), nil
	}
	return nil, errutil.Explain(nil, "invalid Department: %d", x)
}

// UnmarshalJSON implements custom JSON decoding for the enum from a string.
func (x *DepartmentAsString) UnmarshalJSON(data []byte) error {
	str := strings.Trim(string(data), "\"")
	if v, ok := Department_value[str]; ok {
		*x = DepartmentAsString(v)
		return nil
	}
	return errutil.Explain(nil, "invalid Department value: %q", str)
}

type PageReq struct {
	Page int64 `json:"page" query:"page"`
	Size int64 `json:"size" query:"size"`
}

// New returns a new instance (implements Object interface).
func (x *PageReq) New() any {
	return &PageReq{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *PageReq) Binding(r *http.Request) error {
	return Binding(r, []BindingField{
		{"PageReq.Page", "query", "page", &x.Page},
		{"PageReq.Size", "query", "size", &x.Size},
	})
}

// Validate checks field values using generated validation expressions.
func (x *PageReq) Validate() error {
	if !(x.Page >= 1) {
		return errutil.Explain(nil, "validate failed on PageReq.Page")
	}
	if !(x.Size >= 1 && x.Size <= MAX_PAGE_SIZE) {
		return errutil.Explain(nil, "validate failed on PageReq.Size")
	}
	return nil
}

func (x *PageReq) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageReq(%+v)", *x)
}

type Address struct {
	City       string  `json:"city"`
	Street     *string `json:"street,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
}

// New returns a new instance (implements Object interface).
func (x *Address) New() any {
	return &Address{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *Address) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *Address) Validate() error {
	return nil
}

func (x *Address) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *x)
}

type ContactInfo struct {
	Email   string  `json:"email"`
	Phone   *string `json:"phone,omitempty"`
	Address Address `json:"address"`
}

// New returns a new instance (implements Object interface).
func (x *ContactInfo) New() any {
	return &ContactInfo{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *ContactInfo) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *ContactInfo) Validate() error {
	if !(Email(x.Email)) {
		return errutil.Explain(nil, "validate failed on ContactInfo.Email")
	}
	return nil
}

func (x *ContactInfo) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactInfo(%+v)", *x)
}

type DepartmentInfo struct {
	Dept     Department `json:"dept"`
	DeptName string     `json:"deptName"`
}

// New returns a new instance (implements Object interface).
func (x *DepartmentInfo) New() any {
	return &DepartmentInfo{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *DepartmentInfo) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *DepartmentInfo) Validate() error {
	return nil
}

func (x *DepartmentInfo) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentInfo(%+v)", *x)
}

type Manager struct {
	Id       string               `json:"id"`
	Name     string               `json:"name"`
	Age      *int64               `json:"age,omitempty"`
	Vip      bool                 `json:"vip"`
	Salary   float64              `json:"salary"`
	Role     string               `json:"role"`
	Level    ManagerLevelAsString `json:"level"`
	DeptInfo DepartmentInfo       `json:"deptInfo"`
	Contact  ContactInfo          `json:"contact"`
}

// New returns a new instance (implements Object interface).
func (x *Manager) New() any {
	return &Manager{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *Manager) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *Manager) Validate() error {
	if !(len(x.Name) > 0 && len(x.Name) <= 64) {
		return errutil.Explain(nil, "validate failed on Manager.Name")
	}
	if x.Age != nil {
		if !(*x.Age >= MIN_AGE && *x.Age <= MAX_AGE) {
			return errutil.Explain(nil, "validate failed on Manager.Age")
		}
	}
	if !(x.Salary >= SALARY_MIN && x.Salary <= SALARY_MAX) {
		return errutil.Explain(nil, "validate failed on Manager.Salary")
	}
	return nil
}

func (x *Manager) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Manager(%+v)", *x)
}

type ManagerReq struct {
	ManagerReqBody
	Id string `json:"id" path:"id"`
}

// New returns a new instance (implements Object interface).
func (x *ManagerReq) New() any {
	return &ManagerReq{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *ManagerReq) Binding(r *http.Request) error {
	return Binding(r, []BindingField{
		{"ManagerReq.Id", "path", "id", &x.Id},
	})
}

// Validate checks field values using generated validation expressions.
func (x *ManagerReq) Validate() error {
	return nil
}

func (x *ManagerReq) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerReq(%+v)", *x)
}

type ManagerReqBody struct {
}

// New returns a new instance (implements Object interface).
func (x *ManagerReqBody) New() any {
	return &ManagerReqBody{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *ManagerReqBody) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *ManagerReqBody) Validate() error {
	return nil
}

func (x *ManagerReqBody) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerReqBody(%+v)", *x)
}

type CreateManagerReq struct {
	CreateManagerReqBody
}

// New returns a new instance (implements Object interface).
func (x *CreateManagerReq) New() any {
	return &CreateManagerReq{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *CreateManagerReq) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *CreateManagerReq) Validate() error {
	return nil
}

func (x *CreateManagerReq) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateManagerReq(%+v)", *x)
}

type CreateManagerReqBody struct {
	Name     string         `json:"name"`
	Age      *int64         `json:"age,omitempty"`
	Vip      bool           `json:"vip"`
	Salary   float64        `json:"salary"`
	Role     string         `json:"role"`
	Level    ManagerLevel   `json:"level"`
	DeptInfo DepartmentInfo `json:"deptInfo"`
	Contact  ContactInfo    `json:"contact"`
}

// New returns a new instance (implements Object interface).
func (x *CreateManagerReqBody) New() any {
	return &CreateManagerReqBody{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *CreateManagerReqBody) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *CreateManagerReqBody) Validate() error {
	if !(len(x.Name) > 0 && len(x.Name) <= 64) {
		return errutil.Explain(nil, "validate failed on CreateManagerReq.Name")
	}
	if x.Age != nil {
		if !(*x.Age >= MIN_AGE && *x.Age <= MAX_AGE) {
			return errutil.Explain(nil, "validate failed on CreateManagerReq.Age")
		}
	}
	if !(x.Salary >= SALARY_MIN && x.Salary <= SALARY_MAX) {
		return errutil.Explain(nil, "validate failed on CreateManagerReq.Salary")
	}
	return nil
}

func (x *CreateManagerReqBody) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateManagerReqBody(%+v)", *x)
}

type UpdateManagerReq struct {
	UpdateManagerReqBody
	ID string `json:"id" path:"id"`
}

// New returns a new instance (implements Object interface).
func (x *UpdateManagerReq) New() any {
	return &UpdateManagerReq{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *UpdateManagerReq) Binding(r *http.Request) error {
	return Binding(r, []BindingField{
		{"UpdateManagerReq.ID", "path", "id", &x.ID},
	})
}

// Validate checks field values using generated validation expressions.
func (x *UpdateManagerReq) Validate() error {
	return nil
}

func (x *UpdateManagerReq) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateManagerReq(%+v)", *x)
}

type UpdateManagerReqBody struct {
	Name     *string         `json:"name,omitempty"`
	Age      *int64          `json:"age,omitempty"`
	Vip      *bool           `json:"vip"`
	Salary   *float64        `json:"salary,omitempty"`
	Role     *string         `json:"role,omitempty"`
	Level    *ManagerLevel   `json:"level,omitempty"`
	DeptInfo *DepartmentInfo `json:"dept_info,omitempty"`
	Contact  *ContactInfo    `json:"contact,omitempty"`
}

// New returns a new instance (implements Object interface).
func (x *UpdateManagerReqBody) New() any {
	return &UpdateManagerReqBody{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *UpdateManagerReqBody) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *UpdateManagerReqBody) Validate() error {
	if x.Age != nil {
		if !(*x.Age >= MIN_AGE && *x.Age <= MAX_AGE) {
			return errutil.Explain(nil, "validate failed on UpdateManagerReq.Age")
		}
	}
	if x.Salary != nil {
		if !(*x.Salary >= SALARY_MIN && *x.Salary <= SALARY_MAX) {
			return errutil.Explain(nil, "validate failed on UpdateManagerReq.Salary")
		}
	}
	return nil
}

func (x *UpdateManagerReqBody) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateManagerReqBody(%+v)", *x)
}

type ListManagersByPageReq struct {
	ListManagersByPageReqBody
	Page     int64         `json:"page" query:"page"`
	Size     int64         `json:"size" query:"size"`
	Keyword  *string       `json:"keyword,omitempty" query:"keyword"`
	Dept     *Department   `json:"dept,omitempty" query:"dept"`
	MinLevel *ManagerLevel `json:"minLevel,omitempty" query:"minLevel"`
	Vip      *bool         `json:"vip,omitempty" query:"vip"`
}

// New returns a new instance (implements Object interface).
func (x *ListManagersByPageReq) New() any {
	return &ListManagersByPageReq{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *ListManagersByPageReq) Binding(r *http.Request) error {
	return Binding(r, []BindingField{
		{"ListManagersByPageReq.Page", "query", "page", &x.Page},
		{"ListManagersByPageReq.Size", "query", "size", &x.Size},
		{"ListManagersByPageReq.Keyword", "query", "keyword", &x.Keyword},
		{"ListManagersByPageReq.Dept", "query", "dept", &x.Dept},
		{"ListManagersByPageReq.MinLevel", "query", "minLevel", &x.MinLevel},
		{"ListManagersByPageReq.Vip", "query", "vip", &x.Vip},
	})
}

// Validate checks field values using generated validation expressions.
func (x *ListManagersByPageReq) Validate() error {
	if !(x.Page >= 1) {
		return errutil.Explain(nil, "validate failed on PageReq.Page")
	}
	if !(x.Size >= 1 && x.Size <= MAX_PAGE_SIZE) {
		return errutil.Explain(nil, "validate failed on PageReq.Size")
	}
	return nil
}

func (x *ListManagersByPageReq) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListManagersByPageReq(%+v)", *x)
}

type ListManagersByPageReqBody struct {
}

// New returns a new instance (implements Object interface).
func (x *ListManagersByPageReqBody) New() any {
	return &ListManagersByPageReqBody{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *ListManagersByPageReqBody) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *ListManagersByPageReqBody) Validate() error {
	return nil
}

func (x *ListManagersByPageReqBody) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListManagersByPageReqBody(%+v)", *x)
}

type CreateManagerResp struct {
	Errno  ErrCode  `json:"errno"`
	Errmsg string   `json:"errmsg"`
	Data   *Manager `json:"data,omitempty"`
}

// New returns a new instance (implements Object interface).
func (x *CreateManagerResp) New() any {
	return &CreateManagerResp{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *CreateManagerResp) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *CreateManagerResp) Validate() error {
	if !(OneOfErrCode(x.Errno)) {
		return errutil.Explain(nil, "validate failed on CreateManagerResp.Errno")
	}
	return nil
}

func (x *CreateManagerResp) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateManagerResp(%+v)", *x)
}

type UpdateManagerResp struct {
	Errno  ErrCode  `json:"errno"`
	Errmsg string   `json:"errmsg"`
	Data   *Manager `json:"data,omitempty"`
}

// New returns a new instance (implements Object interface).
func (x *UpdateManagerResp) New() any {
	return &UpdateManagerResp{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *UpdateManagerResp) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *UpdateManagerResp) Validate() error {
	if !(OneOfErrCode(x.Errno)) {
		return errutil.Explain(nil, "validate failed on UpdateManagerResp.Errno")
	}
	return nil
}

func (x *UpdateManagerResp) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateManagerResp(%+v)", *x)
}

type GetManagerResp struct {
	Errno  ErrCode  `json:"errno"`
	Errmsg string   `json:"errmsg"`
	Data   *Manager `json:"data,omitempty"`
}

// New returns a new instance (implements Object interface).
func (x *GetManagerResp) New() any {
	return &GetManagerResp{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *GetManagerResp) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *GetManagerResp) Validate() error {
	if !(OneOfErrCode(x.Errno)) {
		return errutil.Explain(nil, "validate failed on GetManagerResp.Errno")
	}
	return nil
}

func (x *GetManagerResp) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetManagerResp(%+v)", *x)
}

type DeleteManagerResp struct {
	Errno  ErrCode `json:"errno"`
	Errmsg string  `json:"errmsg"`
	Data   bool    `json:"data"`
}

// New returns a new instance (implements Object interface).
func (x *DeleteManagerResp) New() any {
	return &DeleteManagerResp{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *DeleteManagerResp) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *DeleteManagerResp) Validate() error {
	if !(OneOfErrCode(x.Errno)) {
		return errutil.Explain(nil, "validate failed on DeleteManagerResp.Errno")
	}
	return nil
}

func (x *DeleteManagerResp) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteManagerResp(%+v)", *x)
}

type ManagersPageData struct {
	Total int64      `json:"total"`
	Page  int64      `json:"page"`
	Size  int64      `json:"size"`
	Items []*Manager `json:"items"`
}

// New returns a new instance (implements Object interface).
func (x *ManagersPageData) New() any {
	return &ManagersPageData{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *ManagersPageData) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *ManagersPageData) Validate() error {
	return nil
}

func (x *ManagersPageData) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagersPageData(%+v)", *x)
}

type ListManagersByPageResp struct {
	Errno  ErrCode           `json:"errno"`
	Errmsg string            `json:"errmsg"`
	Data   *ManagersPageData `json:"data,omitempty"`
}

// New returns a new instance (implements Object interface).
func (x *ListManagersByPageResp) New() any {
	return &ListManagersByPageResp{}
}

// Binding extracts non-body values (path, query) from *http.Request.
func (x *ListManagersByPageResp) Binding(r *http.Request) error {
	return Binding(r, []BindingField{})
}

// Validate checks field values using generated validation expressions.
func (x *ListManagersByPageResp) Validate() error {
	if !(OneOfErrCode(x.Errno)) {
		return errutil.Explain(nil, "validate failed on ListManagersByPageResp.Errno")
	}
	return nil
}

func (x *ListManagersByPageResp) String() string {
	if x == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListManagersByPageResp(%+v)", *x)
}
