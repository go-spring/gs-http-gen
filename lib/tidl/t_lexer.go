// Code generated from TLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package tidl

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type TLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var TLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func tlexerLexerInit() {
	staticData := &TLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "WS_CHAN", "SL_COMMENT_CHAN", "ML_COMMENT_CHAN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'const'", "'enum'", "'type'", "'oneof'", "'rpc'", "'true'", "'false'",
		"'any'", "'bool'", "'int'", "'float'", "'string'", "'binary'", "'stream'",
		"'map'", "'list'", "'<'", "'>'", "'('", "')'", "'{'", "'}'", "'='",
		"','", "'?'", "'@'",
	}
	staticData.SymbolicNames = []string{
		"", "KW_CONST", "KW_ENUM", "KW_TYPE", "KW_ONEOF", "KW_RPC", "KW_TRUE",
		"KW_FALSE", "TYPE_ANY", "TYPE_BOOL", "TYPE_INT", "TYPE_FLOAT", "TYPE_STRING",
		"TYPE_BINARY", "TYPE_STREAM", "TYPE_MAP", "TYPE_LIST", "LESS_THAN",
		"GREATER_THAN", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE",
		"EQUAL", "COMMA", "QUESTION", "AT", "STRING", "IDENTIFIER", "INTEGER",
		"FLOAT", "WHITESPACE", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT",
	}
	staticData.RuleNames = []string{
		"KW_CONST", "KW_ENUM", "KW_TYPE", "KW_ONEOF", "KW_RPC", "KW_TRUE", "KW_FALSE",
		"TYPE_ANY", "TYPE_BOOL", "TYPE_INT", "TYPE_FLOAT", "TYPE_STRING", "TYPE_BINARY",
		"TYPE_STREAM", "TYPE_MAP", "TYPE_LIST", "LESS_THAN", "GREATER_THAN",
		"LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "EQUAL", "COMMA",
		"QUESTION", "AT", "STRING", "IDENTIFIER", "INTEGER", "FLOAT", "DIGIT",
		"LETTER", "HEX_DIGIT", "WHITESPACE", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 33, 300, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 1, 0,
		1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
		1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9,
		1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18,
		1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1,
		23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 5, 26, 184,
		8, 26, 10, 26, 12, 26, 187, 9, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1,
		27, 5, 27, 195, 8, 27, 10, 27, 12, 27, 198, 9, 27, 1, 28, 3, 28, 201, 8,
		28, 1, 28, 4, 28, 204, 8, 28, 11, 28, 12, 28, 205, 1, 28, 1, 28, 1, 28,
		1, 28, 4, 28, 212, 8, 28, 11, 28, 12, 28, 213, 3, 28, 216, 8, 28, 1, 29,
		3, 29, 219, 8, 29, 1, 29, 4, 29, 222, 8, 29, 11, 29, 12, 29, 223, 1, 29,
		1, 29, 4, 29, 228, 8, 29, 11, 29, 12, 29, 229, 3, 29, 232, 8, 29, 1, 29,
		1, 29, 4, 29, 236, 8, 29, 11, 29, 12, 29, 237, 3, 29, 240, 8, 29, 1, 29,
		1, 29, 3, 29, 244, 8, 29, 1, 29, 4, 29, 247, 8, 29, 11, 29, 12, 29, 248,
		3, 29, 251, 8, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 32, 1, 32, 3, 32, 259,
		8, 32, 1, 33, 4, 33, 262, 8, 33, 11, 33, 12, 33, 263, 1, 33, 1, 33, 1,
		34, 1, 34, 1, 34, 3, 34, 271, 8, 34, 1, 34, 5, 34, 274, 8, 34, 10, 34,
		12, 34, 277, 9, 34, 1, 34, 3, 34, 280, 8, 34, 1, 34, 3, 34, 283, 8, 34,
		1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 291, 8, 35, 10, 35, 12,
		35, 294, 9, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 292, 0, 36, 1, 1,
		3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23,
		12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41,
		21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59,
		30, 61, 0, 63, 0, 65, 0, 67, 31, 69, 32, 71, 33, 1, 0, 8, 2, 0, 34, 34,
		92, 92, 2, 0, 46, 46, 95, 95, 2, 0, 43, 43, 45, 45, 2, 0, 69, 69, 101,
		101, 2, 0, 65, 90, 97, 122, 2, 0, 65, 70, 97, 102, 3, 0, 9, 10, 13, 13,
		32, 32, 2, 0, 10, 10, 13, 13, 321, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0,
		0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0,
		0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0,
		0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0,
		0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1,
		0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43,
		1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0,
		51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0,
		0, 59, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0,
		0, 1, 73, 1, 0, 0, 0, 3, 79, 1, 0, 0, 0, 5, 84, 1, 0, 0, 0, 7, 89, 1, 0,
		0, 0, 9, 95, 1, 0, 0, 0, 11, 99, 1, 0, 0, 0, 13, 104, 1, 0, 0, 0, 15, 110,
		1, 0, 0, 0, 17, 114, 1, 0, 0, 0, 19, 119, 1, 0, 0, 0, 21, 123, 1, 0, 0,
		0, 23, 129, 1, 0, 0, 0, 25, 136, 1, 0, 0, 0, 27, 143, 1, 0, 0, 0, 29, 150,
		1, 0, 0, 0, 31, 154, 1, 0, 0, 0, 33, 159, 1, 0, 0, 0, 35, 161, 1, 0, 0,
		0, 37, 163, 1, 0, 0, 0, 39, 165, 1, 0, 0, 0, 41, 167, 1, 0, 0, 0, 43, 169,
		1, 0, 0, 0, 45, 171, 1, 0, 0, 0, 47, 173, 1, 0, 0, 0, 49, 175, 1, 0, 0,
		0, 51, 177, 1, 0, 0, 0, 53, 179, 1, 0, 0, 0, 55, 190, 1, 0, 0, 0, 57, 215,
		1, 0, 0, 0, 59, 218, 1, 0, 0, 0, 61, 252, 1, 0, 0, 0, 63, 254, 1, 0, 0,
		0, 65, 258, 1, 0, 0, 0, 67, 261, 1, 0, 0, 0, 69, 270, 1, 0, 0, 0, 71, 286,
		1, 0, 0, 0, 73, 74, 5, 99, 0, 0, 74, 75, 5, 111, 0, 0, 75, 76, 5, 110,
		0, 0, 76, 77, 5, 115, 0, 0, 77, 78, 5, 116, 0, 0, 78, 2, 1, 0, 0, 0, 79,
		80, 5, 101, 0, 0, 80, 81, 5, 110, 0, 0, 81, 82, 5, 117, 0, 0, 82, 83, 5,
		109, 0, 0, 83, 4, 1, 0, 0, 0, 84, 85, 5, 116, 0, 0, 85, 86, 5, 121, 0,
		0, 86, 87, 5, 112, 0, 0, 87, 88, 5, 101, 0, 0, 88, 6, 1, 0, 0, 0, 89, 90,
		5, 111, 0, 0, 90, 91, 5, 110, 0, 0, 91, 92, 5, 101, 0, 0, 92, 93, 5, 111,
		0, 0, 93, 94, 5, 102, 0, 0, 94, 8, 1, 0, 0, 0, 95, 96, 5, 114, 0, 0, 96,
		97, 5, 112, 0, 0, 97, 98, 5, 99, 0, 0, 98, 10, 1, 0, 0, 0, 99, 100, 5,
		116, 0, 0, 100, 101, 5, 114, 0, 0, 101, 102, 5, 117, 0, 0, 102, 103, 5,
		101, 0, 0, 103, 12, 1, 0, 0, 0, 104, 105, 5, 102, 0, 0, 105, 106, 5, 97,
		0, 0, 106, 107, 5, 108, 0, 0, 107, 108, 5, 115, 0, 0, 108, 109, 5, 101,
		0, 0, 109, 14, 1, 0, 0, 0, 110, 111, 5, 97, 0, 0, 111, 112, 5, 110, 0,
		0, 112, 113, 5, 121, 0, 0, 113, 16, 1, 0, 0, 0, 114, 115, 5, 98, 0, 0,
		115, 116, 5, 111, 0, 0, 116, 117, 5, 111, 0, 0, 117, 118, 5, 108, 0, 0,
		118, 18, 1, 0, 0, 0, 119, 120, 5, 105, 0, 0, 120, 121, 5, 110, 0, 0, 121,
		122, 5, 116, 0, 0, 122, 20, 1, 0, 0, 0, 123, 124, 5, 102, 0, 0, 124, 125,
		5, 108, 0, 0, 125, 126, 5, 111, 0, 0, 126, 127, 5, 97, 0, 0, 127, 128,
		5, 116, 0, 0, 128, 22, 1, 0, 0, 0, 129, 130, 5, 115, 0, 0, 130, 131, 5,
		116, 0, 0, 131, 132, 5, 114, 0, 0, 132, 133, 5, 105, 0, 0, 133, 134, 5,
		110, 0, 0, 134, 135, 5, 103, 0, 0, 135, 24, 1, 0, 0, 0, 136, 137, 5, 98,
		0, 0, 137, 138, 5, 105, 0, 0, 138, 139, 5, 110, 0, 0, 139, 140, 5, 97,
		0, 0, 140, 141, 5, 114, 0, 0, 141, 142, 5, 121, 0, 0, 142, 26, 1, 0, 0,
		0, 143, 144, 5, 115, 0, 0, 144, 145, 5, 116, 0, 0, 145, 146, 5, 114, 0,
		0, 146, 147, 5, 101, 0, 0, 147, 148, 5, 97, 0, 0, 148, 149, 5, 109, 0,
		0, 149, 28, 1, 0, 0, 0, 150, 151, 5, 109, 0, 0, 151, 152, 5, 97, 0, 0,
		152, 153, 5, 112, 0, 0, 153, 30, 1, 0, 0, 0, 154, 155, 5, 108, 0, 0, 155,
		156, 5, 105, 0, 0, 156, 157, 5, 115, 0, 0, 157, 158, 5, 116, 0, 0, 158,
		32, 1, 0, 0, 0, 159, 160, 5, 60, 0, 0, 160, 34, 1, 0, 0, 0, 161, 162, 5,
		62, 0, 0, 162, 36, 1, 0, 0, 0, 163, 164, 5, 40, 0, 0, 164, 38, 1, 0, 0,
		0, 165, 166, 5, 41, 0, 0, 166, 40, 1, 0, 0, 0, 167, 168, 5, 123, 0, 0,
		168, 42, 1, 0, 0, 0, 169, 170, 5, 125, 0, 0, 170, 44, 1, 0, 0, 0, 171,
		172, 5, 61, 0, 0, 172, 46, 1, 0, 0, 0, 173, 174, 5, 44, 0, 0, 174, 48,
		1, 0, 0, 0, 175, 176, 5, 63, 0, 0, 176, 50, 1, 0, 0, 0, 177, 178, 5, 64,
		0, 0, 178, 52, 1, 0, 0, 0, 179, 185, 5, 34, 0, 0, 180, 181, 5, 92, 0, 0,
		181, 184, 9, 0, 0, 0, 182, 184, 8, 0, 0, 0, 183, 180, 1, 0, 0, 0, 183,
		182, 1, 0, 0, 0, 184, 187, 1, 0, 0, 0, 185, 183, 1, 0, 0, 0, 185, 186,
		1, 0, 0, 0, 186, 188, 1, 0, 0, 0, 187, 185, 1, 0, 0, 0, 188, 189, 5, 34,
		0, 0, 189, 54, 1, 0, 0, 0, 190, 196, 3, 63, 31, 0, 191, 195, 3, 63, 31,
		0, 192, 195, 3, 61, 30, 0, 193, 195, 7, 1, 0, 0, 194, 191, 1, 0, 0, 0,
		194, 192, 1, 0, 0, 0, 194, 193, 1, 0, 0, 0, 195, 198, 1, 0, 0, 0, 196,
		194, 1, 0, 0, 0, 196, 197, 1, 0, 0, 0, 197, 56, 1, 0, 0, 0, 198, 196, 1,
		0, 0, 0, 199, 201, 7, 2, 0, 0, 200, 199, 1, 0, 0, 0, 200, 201, 1, 0, 0,
		0, 201, 203, 1, 0, 0, 0, 202, 204, 3, 61, 30, 0, 203, 202, 1, 0, 0, 0,
		204, 205, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206,
		216, 1, 0, 0, 0, 207, 208, 5, 48, 0, 0, 208, 209, 5, 120, 0, 0, 209, 211,
		1, 0, 0, 0, 210, 212, 3, 65, 32, 0, 211, 210, 1, 0, 0, 0, 212, 213, 1,
		0, 0, 0, 213, 211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 216, 1, 0, 0,
		0, 215, 200, 1, 0, 0, 0, 215, 207, 1, 0, 0, 0, 216, 58, 1, 0, 0, 0, 217,
		219, 7, 2, 0, 0, 218, 217, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219, 239,
		1, 0, 0, 0, 220, 222, 3, 61, 30, 0, 221, 220, 1, 0, 0, 0, 222, 223, 1,
		0, 0, 0, 223, 221, 1, 0, 0, 0, 223, 224, 1, 0, 0, 0, 224, 231, 1, 0, 0,
		0, 225, 227, 5, 46, 0, 0, 226, 228, 3, 61, 30, 0, 227, 226, 1, 0, 0, 0,
		228, 229, 1, 0, 0, 0, 229, 227, 1, 0, 0, 0, 229, 230, 1, 0, 0, 0, 230,
		232, 1, 0, 0, 0, 231, 225, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 240,
		1, 0, 0, 0, 233, 235, 5, 46, 0, 0, 234, 236, 3, 61, 30, 0, 235, 234, 1,
		0, 0, 0, 236, 237, 1, 0, 0, 0, 237, 235, 1, 0, 0, 0, 237, 238, 1, 0, 0,
		0, 238, 240, 1, 0, 0, 0, 239, 221, 1, 0, 0, 0, 239, 233, 1, 0, 0, 0, 240,
		250, 1, 0, 0, 0, 241, 243, 7, 3, 0, 0, 242, 244, 7, 2, 0, 0, 243, 242,
		1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 246, 1, 0, 0, 0, 245, 247, 3, 61,
		30, 0, 246, 245, 1, 0, 0, 0, 247, 248, 1, 0, 0, 0, 248, 246, 1, 0, 0, 0,
		248, 249, 1, 0, 0, 0, 249, 251, 1, 0, 0, 0, 250, 241, 1, 0, 0, 0, 250,
		251, 1, 0, 0, 0, 251, 60, 1, 0, 0, 0, 252, 253, 2, 48, 57, 0, 253, 62,
		1, 0, 0, 0, 254, 255, 7, 4, 0, 0, 255, 64, 1, 0, 0, 0, 256, 259, 3, 61,
		30, 0, 257, 259, 7, 5, 0, 0, 258, 256, 1, 0, 0, 0, 258, 257, 1, 0, 0, 0,
		259, 66, 1, 0, 0, 0, 260, 262, 7, 6, 0, 0, 261, 260, 1, 0, 0, 0, 262, 263,
		1, 0, 0, 0, 263, 261, 1, 0, 0, 0, 263, 264, 1, 0, 0, 0, 264, 265, 1, 0,
		0, 0, 265, 266, 6, 33, 0, 0, 266, 68, 1, 0, 0, 0, 267, 268, 5, 47, 0, 0,
		268, 271, 5, 47, 0, 0, 269, 271, 5, 35, 0, 0, 270, 267, 1, 0, 0, 0, 270,
		269, 1, 0, 0, 0, 271, 275, 1, 0, 0, 0, 272, 274, 8, 7, 0, 0, 273, 272,
		1, 0, 0, 0, 274, 277, 1, 0, 0, 0, 275, 273, 1, 0, 0, 0, 275, 276, 1, 0,
		0, 0, 276, 282, 1, 0, 0, 0, 277, 275, 1, 0, 0, 0, 278, 280, 5, 13, 0, 0,
		279, 278, 1, 0, 0, 0, 279, 280, 1, 0, 0, 0, 280, 281, 1, 0, 0, 0, 281,
		283, 5, 10, 0, 0, 282, 279, 1, 0, 0, 0, 282, 283, 1, 0, 0, 0, 283, 284,
		1, 0, 0, 0, 284, 285, 6, 34, 1, 0, 285, 70, 1, 0, 0, 0, 286, 287, 5, 47,
		0, 0, 287, 288, 5, 42, 0, 0, 288, 292, 1, 0, 0, 0, 289, 291, 9, 0, 0, 0,
		290, 289, 1, 0, 0, 0, 291, 294, 1, 0, 0, 0, 292, 293, 1, 0, 0, 0, 292,
		290, 1, 0, 0, 0, 293, 295, 1, 0, 0, 0, 294, 292, 1, 0, 0, 0, 295, 296,
		5, 42, 0, 0, 296, 297, 5, 47, 0, 0, 297, 298, 1, 0, 0, 0, 298, 299, 6,
		35, 2, 0, 299, 72, 1, 0, 0, 0, 25, 0, 183, 185, 194, 196, 200, 205, 213,
		215, 218, 223, 229, 231, 237, 239, 243, 248, 250, 258, 263, 270, 275, 279,
		282, 292, 3, 0, 2, 0, 0, 3, 0, 0, 4, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// TLexerInit initializes any static state used to implement TLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewTLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func TLexerInit() {
	staticData := &TLexerLexerStaticData
	staticData.once.Do(tlexerLexerInit)
}

// NewTLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewTLexer(input antlr.CharStream) *TLexer {
	TLexerInit()
	l := new(TLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &TLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "TLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// TLexer tokens.
const (
	TLexerKW_CONST            = 1
	TLexerKW_ENUM             = 2
	TLexerKW_TYPE             = 3
	TLexerKW_ONEOF            = 4
	TLexerKW_RPC              = 5
	TLexerKW_TRUE             = 6
	TLexerKW_FALSE            = 7
	TLexerTYPE_ANY            = 8
	TLexerTYPE_BOOL           = 9
	TLexerTYPE_INT            = 10
	TLexerTYPE_FLOAT          = 11
	TLexerTYPE_STRING         = 12
	TLexerTYPE_BINARY         = 13
	TLexerTYPE_STREAM         = 14
	TLexerTYPE_MAP            = 15
	TLexerTYPE_LIST           = 16
	TLexerLESS_THAN           = 17
	TLexerGREATER_THAN        = 18
	TLexerLEFT_PAREN          = 19
	TLexerRIGHT_PAREN         = 20
	TLexerLEFT_BRACE          = 21
	TLexerRIGHT_BRACE         = 22
	TLexerEQUAL               = 23
	TLexerCOMMA               = 24
	TLexerQUESTION            = 25
	TLexerAT                  = 26
	TLexerSTRING              = 27
	TLexerIDENTIFIER          = 28
	TLexerINTEGER             = 29
	TLexerFLOAT               = 30
	TLexerWHITESPACE          = 31
	TLexerSINGLE_LINE_COMMENT = 32
	TLexerMULTI_LINE_COMMENT  = 33
)

// TLexer escapedChannels.
const (
	TLexerWS_CHAN         = 2
	TLexerSL_COMMENT_CHAN = 3
	TLexerML_COMMENT_CHAN = 4
)
